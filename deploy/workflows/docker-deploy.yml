name: Build and Deploy via Docker Hub

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      env:
        DATABASE_URL: sqlite:///test.db
        FLASK_ENV: testing
      run: |
        python -m pytest tests/ -v || echo "No tests found - continuing deployment"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/mypetsvoice:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/mypetsvoice:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 600s
        command_timeout: 30m
        script: |
          cd ~/my-pets-voice
          
          echo "🔄 Updating deployment configuration..."
          
          # Create environment file from GitHub Secrets
          cat > .env.production << EOF
          # Database Configuration
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # Session Configuration
          SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}
          
          # OpenAI Configuration
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          
          # Kakao OAuth Configuration
          KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
          KAKAO_LOGOUT_REDIRECT_URI=${{ secrets.KAKAO_LOGOUT_REDIRECT_URI }}
          KAPI_HOST=${{ secrets.KAPI_HOST }}
          KAUTH_HOST=${{ secrets.KAUTH_HOST }}
          
          # LangSmith Configuration
          LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
          LANGSMITH_PROJECT=${{ secrets.LANGSMITH_PROJECT }}
          LANGSMITH_ENDPOINT=${{ secrets.LANGSMITH_ENDPOINT }}
          LANGSMITH_TRACING=${{ secrets.LANGSMITH_TRACING }}
          
          # Application Configuration
          FLASK_ENV=production
          DEBUG=false
          LOG_LEVEL=INFO
          
          # Vector DB and Documents
          VECTOR_DB=/app/vector_db
          DOCUMENTS_PATH=/app/data
          
          # Storage
          STORAGE_PATH=/app/app/static/uploads
          EOF
          
          echo "📥 Pulling latest Docker image..."
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mypetsvoice:latest
          
          echo "🛑 Stopping current containers..."
          sudo docker compose -f docker-compose.prod.yml down || echo "No containers to stop"
          
          echo "🗄️ Running database migrations..."
          sudo docker run --rm \
            --env-file .env.production \
            -v $(pwd)/vector_db:/app/vector_db \
            -v $(pwd)/data:/app/data \
            ${{ secrets.DOCKERHUB_USERNAME }}/mypetsvoice:latest \
            python app/models/init_db_with_check.py || echo "Database migration completed"
          
          echo "🚀 Starting new containers..."
          sudo docker compose -f docker-compose.prod.yml up -d
          
          echo "🧹 Cleaning up unused Docker resources..."
          sudo docker system prune -f
          
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          echo "🏥 Running health check..."
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "✅ Health check passed - Application is running"
              break
            else
              echo "⏳ Attempt $attempt/$max_attempts - Waiting for application..."
              sleep 10
              ((attempt++))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔍 Container logs:"
            sudo docker compose -f docker-compose.prod.yml logs --tail=50 web
          fi
          
          echo "📊 Final container status:"
          sudo docker compose -f docker-compose.prod.yml ps
          
          echo "✅ Deployment completed!"
          echo "🌐 URL: http://$(curl -s http://checkip.amazonaws.com/)"